<?php

namespace DcD\RestBundle\Repository;
use DcD\RestBundle\Entity\EntityNotFoundException;
use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\EntityRepository;

/**
 * BasketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BasketRepository extends EntityRepository
{
    /**
     * Get all basket + basketItems
     * implemented to get FieldNames instead EntityName
     * and to run only one query instead of many more
     *
     * @return array
     */
    public function getBaskets()
    {
        return $this->getEntityManager()->createQuery('
            SELECT 
               b, bi
            FROM 
              RestBundle:Basket b 
              LEFT JOIN b.basketItems bi
            WHERE
              b.isDeleted = 0
            
         ')
            ->getResult(AbstractQuery::HYDRATE_ARRAY);
    }

    /**
     * Get one complete basket + basketItems
     * implemented to get FieldNames instead EntityName
     *
     * @param $basketId
     * @return array
     */
    public function getBasket($basketId)
    {
        return $this->getEntityManager()->createQuery('
            SELECT 
               b, bi
            FROM 
              RestBundle:Basket b 
              LEFT JOIN b.basketItems bi  
            WHERE 
              b.id = :id AND            
              b.isDeleted = 0
         ')
            ->setParameter('id', $basketId)->getOneOrNullResult(AbstractQuery::HYDRATE_ARRAY);
    }

    public function merge($mergeId, $id)
    {
        // test that basket exists and is'nt deleted
        if(empty($this->getBasket($mergeId)))
        {
            throw new EntityNotFoundException('Basket not found with id: '.$mergeId);
        }

        // test that basket exists and is'nt deleted
        if(empty($this->getBasket($id))) {
            throw new EntityNotFoundException('Basket not found with id: '.$id);
        }

        // merge all basketItems to other basket
        $em = $this->getEntityManager();
        $em->beginTransaction();
        $em->createQuery('UPDATE RestBundle:BasketItem bi SET bi.basket=:id WHERE bi.basket=:mergeId')
            ->setParameter('id', $id)
            ->setParameter('mergeId', $mergeId)
            ->getOneOrNullResult();

        // delete merged basket
        $basket = $this->find($mergeId);
        $basket->setDeleted(true);
        $em->persist($basket);
        $em->flush();

        $em->commit();
    }
}
